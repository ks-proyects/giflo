/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE dia-trabajoBaseService PLEASE EDIT ../dia-trabajo.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
// DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection, DocumentReference } from '@angular/fire/firestore';
import { AngularFireFunctions } from '@angular/fire/functions';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { DiaTrabajo } from '../../domain/giflo_db/dia-trabajo';
import { SessionService } from '../session.service';
import { DatePipe } from '@angular/common';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../DiaTrabajo.service.ts
 */

/*
 * SCHEMA DB DiaTrabajo
 *
	{
		descripcion: {
			type: 'String'
		},
		anio: {
			type: 'Integer'
		},
		mes: {
			type: 'Integer'
		},
		fecha: {
			type: 'Date'
		},
		//RELATIONS
		//EXTERNAL RELATIONS
	}
 *
 */
@Injectable()
export class DiaTrabajoBaseService {

    private diatrabajoCollection: AngularFirestoreCollection<DiaTrabajo>;
    private idEmpresa: string;
    private datePipe: DatePipe;
    private idDiaTrabajo: string;
    constructor(
        private afs: AngularFirestore,
        private fns: AngularFireFunctions,
        private session: SessionService
    ) {
        this.datePipe = new DatePipe('en-US');
        session.getUserInfo().subscribe(ui => {
            const currentDate = new Date();
            if (ui) {
                this.idEmpresa = ui.idEmpresa;
                this.idDiaTrabajo = currentDate.getFullYear().toString() + currentDate.getMonth().toString() +
                    currentDate.getDate().toString() + this.idEmpresa;
                this.get(this.idDiaTrabajo).valueChanges().subscribe(item => {
                    if (!item) {
                        const newItem: DiaTrabajo = { id: this.idDiaTrabajo };
                        newItem.anio = currentDate.getFullYear();
                        newItem.mes = currentDate.getMonth();
                        newItem.fecha = currentDate;
                        newItem.estado = 'VIGENTE';
                        newItem.empresa = this.idEmpresa;
                        newItem.descripcion = 'Producci√≥n ' + this.datePipe.transform(currentDate, 'yyyy MM dd');
                        this.createCustom(newItem);
                    }
                });
            }
        });
        this.diatrabajoCollection = afs.collection<DiaTrabajo>('diatrabajo');
    }


    // CRUD METHODS

    /**
    * DiaTrabajoService.create
    *   @description CRUD ACTION create
    *
    */
    create(item: DiaTrabajo): Promise<DocumentReference> {
        return this.diatrabajoCollection.add(item);
    }
    createCustom(item: DiaTrabajo): Promise<void> {
        return this.diatrabajoCollection.doc(item.id).set(item);
    }

    /**
    * DiaTrabajoService.delete
    *   @description CRUD ACTION delete
    *   @param ObjectId id Id DiaTrabajo
    *
    */
    remove(id: string) {
        const itemDoc: AngularFirestoreDocument<any> = this.diatrabajoCollection.doc(id);
        itemDoc.delete();
    }

    /**
    * DiaTrabajoService.get
    *   @description CRUD ACTION get
    *   @param ObjectId id Id DiaTrabajo
    *
    */
    get(id: string): AngularFirestoreDocument<DiaTrabajo> {
        return this.afs.doc<DiaTrabajo>('diatrabajo/' + id);
    }
    getCurrentDay(): AngularFirestoreDocument<DiaTrabajo> {
        return this.afs.doc<DiaTrabajo>('diatrabajo/' + this.idDiaTrabajo);
    }

    /**
    * DiaTrabajoService.list
    *   @description CRUD ACTION list
    *   @returns ARRAY OF DiaTrabajo
    *
    */
    list(): Observable<DiaTrabajo[]> {
        return this.diatrabajoCollection.snapshotChanges().pipe(
            map(actions => actions.map(a => {
                const data = a.payload.doc.data() as DiaTrabajo;
                const id = a.payload.doc.id;
                return { id, ...data };
            }))
        );
    }

    /**
    * DiaTrabajoService.update
    *   @description CRUD ACTION update
    *   @param ObjectId id Id DiaTrabajo
    *
    */
    update(itemDoc: AngularFirestoreDocument<DiaTrabajo>, item: DiaTrabajo): Promise<void> {
        return itemDoc.update(item);
    }


    // Custom APIs

}
