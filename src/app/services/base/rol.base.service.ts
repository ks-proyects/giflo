/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE rolBaseService PLEASE EDIT ../rol.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
// DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection, DocumentReference } from '@angular/fire/firestore';
import { AngularFireFunctions } from '@angular/fire/functions';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Rol } from '../../domain/giflo_db/rol';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../Rol.service.ts
 */

/*
 * SCHEMA DB Rol
 *
	{
		nombre: {
			type: 'String'
		},
		//RELATIONS
		//EXTERNAL RELATIONS
		activo: {
			type: Schema.ObjectId,
			ref : "Rol"
		},
		rol: {
			type: Schema.ObjectId,
			ref : "MenuItem"
		},
		rol: {
			type: Schema.ObjectId,
			ref : "Empleado"
		},
	}
 *
 */
@Injectable()
export class RolBaseService {

    private rolCollection: AngularFirestoreCollection<Rol>;
    constructor(
        private afs: AngularFirestore,
        private fns: AngularFireFunctions
    ) {
        this.rolCollection = afs.collection<Rol>('rol');
        this.list().subscribe((rols: Rol[]) => {
            if (rols.length === 0) {
                let item: Rol = { id: 'DEF', nombre: 'DEFAULT', activo: 'ACT' };
                this.create(item);
                item = { id: 'GER', nombre: 'GERENTE', activo: 'ACT' };
                this.create(item);
                item = { id: 'CULT', nombre: 'CULTIVADOR', activo: 'ACT' };
                this.create(item);
                item = { id: 'POST', nombre: 'POSTCOSECHA', activo: 'ACT' };
                this.create(item);
                item = { id: 'FUMN', nombre: 'FUNIGADORES', activo: 'ACT' };
                this.create(item);
                item = { id: 'COCH', nombre: 'COCHEROS', activo: 'ACT' };
                this.create(item);
                item = { id: 'SUPCU', nombre: 'SUPERVISOR DE CULTIVO', activo: 'ACT' };
                this.create(item);
                item = { id: 'SUPPOST', nombre: 'SUPERVISOR DE POSTCOSECHA', activo: 'ACT' };
                this.create(item);
                item = { id: 'VEND', nombre: 'VENDEDOR', activo: 'ACT' };
                this.create(item);
                item = { id: 'ADM', nombre: 'ADMINISTRADOR', activo: 'ACT' };
                this.create(item);
                item = { id: 'SUPERADMIN', nombre: 'SUPERADMIN', activo: 'ACT' };
                this.create(item);
            }
        });
    }

    // CRUD METHODS
    /**
    * RolService.create
    *   @description CRUD ACTION create
    *
    */
    create(item: Rol): Promise<void> {
        return this.rolCollection.doc(item.id).set(item);
    }

    /**
    * RolService.delete
    *   @description CRUD ACTION delete
    *   @param ObjectId id Id
    *
    */
    remove(id: string) {
        const itemDoc: AngularFirestoreDocument<any> = this.rolCollection.doc(id);
        itemDoc.delete();
    }

    /**
    * RolService.get
    *   @description CRUD ACTION get
    *   @param ObjectId id Id 
    *
    */
    get(id: string): AngularFirestoreDocument<Rol> {
        return this.afs.doc<Rol>('rol/' + id);
    }

    /**
    * RolService.list
    *   @description CRUD ACTION list
    *
    */
    list(): Observable<Rol[]> {
        return this.afs.collection('rol').snapshotChanges().pipe(
            map(actions => actions.map(a => {
                const data = a.payload.doc.data() as Rol;
                const id = a.payload.doc.id;
                return { id, ...data };
            }))
        );
    }

    /**
    * RolService.update
    *   @description CRUD ACTION update
    *   @param ObjectId id Id
    *
    */
    update(itemDoc: AngularFirestoreDocument<Rol>, item: Rol): Promise<void> {
        return itemDoc.update(item);
    }


    // Custom APIs

}
