/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE produccionBaseService PLEASE EDIT ../produccion.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
// DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection, DocumentReference } from '@angular/fire/firestore';
import { AngularFireFunctions } from '@angular/fire/functions';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Produccion } from '../../domain/giflo_db/produccion';
import { SessionService } from '../session.service';
import { DiaTrabajoService } from '../dia-trabajo.service';
import { ROL_CULTIVADOR } from '../rol.service';
import { CamaService } from '../cama.service';
import { Cama } from 'src/app/domain/giflo_db/cama';
import { ProduccionCama } from 'src/app/domain/dto/produccionCama';
import { ProduccionVariedad } from 'src/app/domain/dto/produccionVariedad';
import { leftJoinDocument } from '../generic/leftJoin.service';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../produccion.service.ts
 */

/*
 * SCHEMA DB produccion
 *
	{
		cantidad: {
			type: 'Integer'
		},
		estado: {
			type: 'String'
		},
		Produccion: {
			type: 'String'
		},
		nave: {
			type: 'String'
		},
		cama: {
			type: 'String'
		},
		dia_trabajo: {
			type: 'String'
		},
		//RELATIONS
		//EXTERNAL RELATIONS
	}
 *
 */
@Injectable()
export class ProduccionBaseService {

	private produccionCollection: AngularFirestoreCollection<Produccion>;
	idEmpresa: string;
	idEmpleado: string;
	idDiaTrabajo: string;
	constructor(
		protected afs: AngularFirestore,
		private fns: AngularFireFunctions,
		public session: SessionService,
		public diaTrabajoService: DiaTrabajoService,

	) {
		this.idEmpleado = '-1';
		this.idEmpresa = '-1';
		this.idDiaTrabajo = '-1';
		session.getUser().subscribe(user => {
			if (user) {
				this.idEmpleado = user.currentEmpleado ? user.currentEmpleado : '-1';
				this.idEmpresa = user.currentIdEmpresa ? user.currentIdEmpresa : '-1';
				this.idDiaTrabajo = diaTrabajoService.idDiaTrabajo;
				this.produccionCollection = this.afs.collection<Produccion>('produccion', ref => ref.
					where('empresa', '==', this.idEmpresa).
					where('diaTrabajo', '==', this.idDiaTrabajo).
					where('trabajador', '==', this.idEmpleado));
			}
		});
	}


	// CRUD METHODS
	/**
	   * ProduccionService.create
	   *   @description CRUD ACTION create
	   *
	   */
	create(item: Produccion): Promise<DocumentReference> {
		item.empresa = this.idEmpresa;
		return this.produccionCollection.add(item);
	}

	/**
	* ProduccionService.delete
	*   @description CRUD ACTION delete
	*   @param ObjectId id Id
	*
	*/
	remove(id: string) {
		const itemDoc: AngularFirestoreDocument<any> = this.produccionCollection.doc(id);
		itemDoc.delete();
	}

	/**
	* ProduccionService.get
	*   @description CRUD ACTION get
	*   @param ObjectId id Id 
	*
	*/
	get(id: string): AngularFirestoreDocument<Produccion> {
		return this.afs.doc<Produccion>('produccion/' + id);
	}

	/**
	* ProduccionService.list
	*   @description CRUD ACTION list
	*
	*/
	list(): Observable<Produccion[]> {
		return this.produccionCollection.snapshotChanges().pipe(
			map(actions => actions.map(a => {
				const data = a.payload.doc.data() as Produccion;
				const id = a.payload.doc.id;
				return { id, ...data };
			}))
		);
	}

	/**
	* ProduccionService.update
	*   @description CRUD ACTION update
	*   @param ObjectId id Id
	*
	*/
	update(itemDoc: AngularFirestoreDocument<Produccion>, item: Produccion): Promise<void> {
		return itemDoc.update(item);
	}

	// Custom APIs

}
