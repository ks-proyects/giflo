/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE contactoBaseService PLEASE EDIT ../contacto.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
// DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection, DocumentReference } from '@angular/fire/firestore';
import { AngularFireFunctions } from '@angular/fire/functions';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { Contacto } from '../../domain/giflo_db/contacto';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../Contacto.service.ts
 */

/*
 * SCHEMA DB Contacto
 *
	{
		celular: {
			type: 'String'
		},
		email: {
			type: 'String'
		},
		paginaWeb: {
			type: 'String'
		},
		telefono: {
			type: 'String'
		},
		urlFacebook: {
			type: 'String'
		},
		//RELATIONS
		//EXTERNAL RELATIONS
		contacto: {
			type: Schema.ObjectId,
			ref : "Empleado"
		},
	}
 *
 */
@Injectable()
export class ContactoBaseService {

    private contactoCollection: AngularFirestoreCollection<Contacto>;
    constructor(
        private afs: AngularFirestore,
        private fns: AngularFireFunctions
    ) {
        this.contactoCollection = afs.collection<Contacto>('contacto');
    }


    // CRUD METHODS

    /**
    * ContactoService.list
    *   @description CRUD ACTION list
    *
    */
    list(): Observable<Contacto[]> {
        return this.afs.collection('contacto').snapshotChanges().pipe(
            map(actions => actions.map(a => {
                const data = a.payload.doc.data() as Contacto;
                const id = a.payload.doc.id;
                return { id, ...data };
            }))
        );
    }

    create(item: Contacto): Promise<DocumentReference> {
        return this.contactoCollection.add(item);
    }
    update(itemDoc: AngularFirestoreDocument<Contacto>, item: Contacto): Promise<void> {
        return itemDoc.update(item);
    }

    // Custom APIs

}
